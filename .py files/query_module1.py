# -*- coding: utf-8 -*-
"""query_module1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kl4diltn4NYzzcWiMvH2nPOvr_GV2eFO
"""

from data_module import*

data = import_dataset('data1.csv')

"""FUNCTIONS OF QUERY MODULE

i.	A function for computing the average age, modal age, median age of those who smoked and had hypertensions that resulted in stroke.
Refrences-
          1.https://www.w3schools.com/python/gloss_python_loop_dictionary_items.asp
"""

def getAgeList(maiList):
  ageList = []
  for i in data.values():
    if i['Smoking Status'] == 'Formerly smoked' and i['Hypertension'] == '1' and i['Stroke Occurrence'] == '1':
      ageList.append(int(i['Age']))
  return ageList
  #this code shows smoke , hypertension that resulted into stroke patient.

"""1.average age of those who smoked and had hypertensions that resulted in stroke."""

def get_mean(data):
  avg = sum(data) / len(data)
  return round(avg,2)

"""2.modal age  of those who smoked and had hypertensions that resulted in stroke."""

def get_mode(data):
  mode = max(set(data), key = data.count)
  return mode

"""3.median age of those who smoked and had hypertensions that resulted in stroke."""

def get_median(data):
  length = len(data)
  data.sort()
  if length % 2 == 0:#its check even or odd number of data
      median = (data[length//2] + data[length//2 - 1])/2
  else:
    median = data[length//2]
  return median

def smoke_hyper_stroke():
  result={
      'Average Age':get_mean(getAgeList(data)),
      'Modal Age':get_mode(getAgeList(data)),
      'Median Age':get_median(getAgeList(data))
  }
  return result

def save_to_csv(filename, headers, data):
    #Save query results to a CSV file.
    with open(filename, 'w') as f:
        f.write(','.join(headers) + '\n')
        if isinstance(data, dict):
            for key, value in data.items():
                if isinstance(value, dict):
                    row = [key] + [str(value.get(h, '')) for h in headers[1:]]
                else:
                    row = [key, str(value)]
                f.write(','.join(row) + '\n')
        elif isinstance(data, list):
            for row in data:
                f.write(','.join([str(x) for x in row]) + '\n')

"""ii.	A function for computing the average age, modal age, median age, and average glucose level of those who had heart disease that resulted in stroke.

1. average age of those who had heart disease that resulted in stroke.
2. modal age of those who had heart disease that resulted in stroke.
3. median age of those who had heart disease that resulted in stroke.
4. average glucose level of those who had heart disease that resulted in stroke.

"""

def Heartdisease_stroke ():
  ageList = []#to create empty list
  glucoseList = []
  for i in data.values():
    if i['Heart Disease'] == '1' and  i['Stroke Occurrence'] == '1':
      ageList.append(int(i['Age']))
      glucoseList.append(float(i['Average Glucose Level']))
  #for find glucose level of those who had heart disease that resulted in stroke
# Calculate avg glucose level for those with heart issues and stroke.
#this code shows heart problem that resulted into stroke patient.
#below code to find mean mode median
  median = get_median(ageList)
  mode = get_mode(ageList)
  avg = get_mean(ageList)
  avg_glucose = get_mean(glucoseList)
#
  result={
      'average age':avg,
      'modal age':mode,
      'median age':median,
      'average glucose level':avg_glucose
  }
  return result

"""iii.	A function for computing the average age, modal age, median age of patients based on genders of those whose hypertensions resulted in stroke and of those whose hypertensions did not result in stroke."""

def analyzeHypertensionStrokeData():
    male_hyp_stroke_ages = []
    male_hyp_no_stroke_ages = []
    female_hyp_stroke_ages = []
    female_hyp_no_stroke_ages = []

    for entry in data.values():
        gender = str(entry.get('Gender'))
        hypertension = str(entry.get('Hypertension'))
        stroke = str(entry.get('Stroke Occurrence'))
        age = int(entry['Age'])

        if hypertension == '1' and stroke == '1':
            if gender == 'Male':
                male_hyp_stroke_ages.append(age)
            elif gender == 'Female':
                female_hyp_stroke_ages.append(age)
        elif hypertension == '1' and stroke == '0':
            if gender == 'Male':
                male_hyp_no_stroke_ages.append(age)
            elif gender == 'Female':
                female_hyp_no_stroke_ages.append(age)

    result = {
        "Hypertensive Males with Stroke": {
            "Average Age": get_mean(male_hyp_stroke_ages),
            "Modal Age": get_mode(male_hyp_stroke_ages),
            "Median Age": get_median(male_hyp_stroke_ages)
        },
        "Hypertensive Males without Stroke": {
            "Average Age": get_mean(male_hyp_no_stroke_ages),
            "Modal Age": get_mode(male_hyp_no_stroke_ages),
            "Median Age": get_median(male_hyp_no_stroke_ages)
        },
        "Hypertensive Females with Stroke": {
            "Average Age": get_mean(female_hyp_stroke_ages),
            "Modal Age": get_mode(female_hyp_stroke_ages),
            "Median Age": get_median(female_hyp_stroke_ages)
        },
        "Hypertensive Females without Stroke": {
            "Average Age": get_mean(female_hyp_no_stroke_ages),
            "Modal Age": get_mode(female_hyp_no_stroke_ages),
            "Median Age": get_median(female_hyp_no_stroke_ages)
        }
    }

    return result

""" iv.	A function for computing the average age, modal age, median age of those whose smoking habits result in stroke and for those whose smoking habit did not result in stroke"""

def smokeHabit_stroke():
  stroke_smoke = []#for those who smoke and had a stroke
  no_stroke_smoke = []#for those who smoke and not had a stroke
  for i in data.values():
    if i['Smoking Status'] == 'Formerly smoked' and i['Stroke Occurrence'] == '1':#for those who smoke and had a stroke
      stroke_smoke.append(int(i['Age']))
    elif i['Smoking Status'] == 'Formerly smoked' and i['Stroke Occurrence'] == '0':#for those who smoke and not had a stroke
      no_stroke_smoke.append(int(i['Age']))

  result = {
      #for those smoke and resulted into stroke
      "Smoking Habit": {
          "Average Age": get_mean(stroke_smoke),
          "Modal Age": get_mode(stroke_smoke),
          "Median Age": get_median(stroke_smoke)
      },
      "Smoking Habit": {
          "Average Age": get_mean(no_stroke_smoke),
          "Modal Age": get_mode(no_stroke_smoke),
          "Median Age": get_median(no_stroke_smoke)
      }
  }
  return result

"""v.	A function for computing the average age, modal age, median age of those who lived in urban areas and for those in rural areas that had stroke"""

#function for computing the average age, modal age, median age of those who lived in urban areas and for those in rural areas that had stroke
def urban_rural_areas_stroke():
  urban_areas_stroke = []
  rural_areas_stroke = []
  for i in data.values():
    if i['Residence Type'] == 'Urban' and i['Stroke Occurrence'] == '1':
      urban_areas_stroke.append(int(i['Age']))
    elif i['Residence Type'] == 'Rural' and i['Stroke Occurrence'] == '1':
      rural_areas_stroke.append(int(i['Age']))
#computing the average age, modal age, median age of those who lived in urban areas and for those in rural areas that had stroke
  result = {
      "Urban Areas": {
          "Average Age": get_mean(urban_areas_stroke),
          "Modal Age": get_mode(urban_areas_stroke),
          "Median Age": get_median(urban_areas_stroke)
      },
      "Rural Areas": {
          "Average Age": get_mean(rural_areas_stroke),
          "Modal Age": get_mode(rural_areas_stroke),
          "Median Age": get_median(rural_areas_stroke)
      }
  }
  return result

"""vi.	A function to retrieves the dietary habit(s) of those who had stroke and those who did not have stroke."""

def dietary_habit_stroke() :
  habit_stroke = []
  habit_no_stroke = []
  for i in data.values():
    if i['Stroke Occurrence'] == '1':
      habit_stroke.append(i['Dietary Habits'])
    elif i['Stroke Occurrence'] == '0':
      habit_no_stroke.append(i['Dietary Habits'])
  result = {
      "Habit with Stroke": habit_stroke,
      "Habit without Stroke": habit_no_stroke
  }
  return result

"""vii.	A function that returns anyone whose hypertension resulted in stroke."""

def checkHighBPPStroke():
    highbp_stroke_cases = []

    for record in data.values():
        if record['Hypertension'] == '1' and record['Stroke Occurrence'] == '1':
            highbp_stroke_cases.append(record)

            headers = list(highbp_stroke_cases[0].keys())
            rows = [[row[h] for h in headers] for row in highbp_stroke_cases]
            save_to_csv('highbp_stroke_cases.csv',headers, rows)

    return highbp_stroke_cases

"""viii.	A function to retrieve those who hypertension did not result in stroke and those whose hypertension resulted in stroke"""

def check_highbp_all():
    with_stroke = [entry for entry in data.values()
    if entry.get('Hypertension') == '1' and entry.get('Stroke Occurrence') == '1']
    without_stroke = [entry for entry in data.values()
     if entry.get('Hypertension') == '1' and entry.get('Stroke Occurrence') == '0']
    output = {'WithStroke': with_stroke, 'WithoutStroke': without_stroke}
    headers = list(with_stroke[0].keys())
    rows = [[row[h] for h in headers] for row in with_stroke + without_stroke]
    save_to_csv('check_highbp_all.csv',headers, rows)


    return output

"""ix.	A function that returns everyone with heart disease that has stroke."""

def check_cardiac_stroke_patients():
    patients = [entry for entry in data.values() if entry.get('Heart Disease') == '1' and entry.get('Stroke Occurrence') == '1']
    headers = list(patients[0].keys())
    rows = [[row[h] for h in headers] for row in patients]
    save_to_csv('patients.csv',headers, rows)
    return patients

"""x.	A function that returns the descriptive statistics of any of the features of the dataset. This function should ask for which feature to analyse and then return the statistics. The descriptive statistics are mean, standard deviation, minimum, maximum, 25%, 50%, and 75%."""

def descriptive_stats():
    feature_data = input("Enter feature to analyze (e.g., Age, Average Glucose Level): ")
    values = [float(r[feature_data]) for r in data.values() if feature_data in r and r[feature_data].replace('.','',1).isdigit()]
    if not values:
        return "Invalid feature / no numeric dataset"
    sorted_vals = sorted(values)
    size = len(sorted_vals)
    result = {
        'Mean': get_mean(values),
        'Std Dev': (sum((x - get_mean(values)) * 2 for x in values) / size) * 0.5,
        'Min': min(values),
        'Max': max(values),
        '25%': sorted_vals[int(size * 0.25)],
        '50%': get_median(values),
        '75%': sorted_vals[int(size * 0.75)]
    }

    return result

"""xi.	A function to retrieve the average sleep hours of those who had stroke and those who did not have stroke"""

def query_sleep_hours():
    hours = [float(r['Sleep Hours']) for r in data.values() if r.get('Stroke Occurrence') == '1' and 'Sleep Hours' in r]
    no_hours = [float(r['Sleep Hours']) for r in data.values() if r.get('Stroke Occurrence') == '0' and 'Sleep Hours' in r]
    result = {
        'Stroke': get_mean(hours),
        'No Stroke': get_mean(no_hours)
    }
    save_to_csv('sleep_hours.csv', ['Group', 'Average Sleep Hours'], result)
    return result

"""xii. It's below mean median and mode functions cells please check  above."""